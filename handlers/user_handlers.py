from dp import dp, rate_limit
from utils import *
from aiogram.dispatcher.filters import Text
from buttons import *
import random
from time import time
from collections import Counter
import re
from aiogram import md

ut = Utils()


@rate_limit(2, "start")
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    if message.chat.type == 'private':
        ut.insert_to_private(message)
        text = "–° –º–æ–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏, –º–æ–∂–Ω–æ –æ–∑–Ω–æ–∫–æ–º–∏—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π ‚Äî /help."
    else:
        text = "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É ‚Äî /osel."
    await message.reply(bold(f"""–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, —è ‚Äî —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è –≥—Ä—É–ø–ø.
{text}"""), reply_markup=start_button())


async def random_ipaniy(usid, chat):
    start = time()
    inventory = ut.select_inventory(id=usid, chat=chat)
    mutliplier = 0
    if inventory["vibrator"] == 1:
        luck_chance = [30, 70]
    else:
        luck_chance = [50, 50]
    if random.choices([0, 1], luck_chance, k=1)[0] == 1:
        randomik = random.randint(0, 10)
    else:
        randomik = random.randint(-5, 0)
    if inventory["vodka_use"] == 1:
        mutliplier += 2
        ut.update(chat, "vodka_use", 0, "user_id", usid)
    if inventory["whip"] == 1:
        if inventory["whip_use"] < 10:
            randomik = abs(randomik)
            ut.update("inventory", "whip_use", 1, "user_id", usid, "+")
        else:
            ut.update("inventory", "whip", 0, "user_id", usid)
            ut.update("inventory", "whip_use", 0, "user_id", usid)
    if inventory["dildo"] == 1:
        mutliplier += 2
    if inventory["beer_use"] == 1:
        randomik = abs(randomik)
        ut.update(chat, "beer_use", 0, "user_id", usid)
    if inventory["condoms_use"] == 1:
        ut.update(chat, "condoms_use", 0, "user_id", usid)
        if randomik < 0:
            randomik += int(abs(randomik / 2))
    if inventory["pornfilm_use"] == 1:
        ut.update(chat, "pornfilm_use", 0, "user_id", usid)
        mutliplier += 5
    if mutliplier != 0:
        randomik *= mutliplier

    ut.update(chat, "balance", randomik, "user_id", usid, "+")
    balance = ut.select(chat, "balance", "user_id", usid)

    if randomik < 0:
        text = f"—Ç–≤–æ–π –∞—Å–µ–ª —É–∏–ø–∞–ª —Ç–µ–±—è, –∏ –∑–∞–±—Ä–∞–ª {abs(randomik)} {ending('–∏–ø–∞–Ω–∏–µ', '–∏–ø–∞–Ω–∏—è', '–∏–ø–∞–Ω–∏–π', randomik)}."
    elif randomik > 0:
        text = f"—Ç–µ–±–µ —É–¥–∞–ª–æ—Å—å –≤—ã–∏–ø–∞—Ç—å –∞—Å–ª–∞ {randomik} {ending('—Ä–∞–∑', '—Ä–∞–∑–∞', '—Ä–∞–∑', randomik)}."
    else:
        text = f"—É —Ç–µ–±—è –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –≤—ã–∏–ø–∞—Ç—å –∞—Å–ª–∞."
    stop = time() - start
    return text, balance, randomik



async def is_break(usid, chat):
    start = time()
    inventory = ut.select_inventory(id=usid, chat=chat)
    breaks = random.choices([False, True], [100, 10], k=1)[0]
    if breaks:
        ut.update(chat, "break", 1, "user_id", usid)
        if inventory["vitamine"] == 1:
            text = "–£ –æ—Å–ª–∞ —Ä–∞–∑–æ—Ä–≤–∞–ª–æ—Å—å –æ—á–∫–æ, –∏ —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –µ–≥–æ –∏–ø–∞—Ç—å 2 —á–∞—Å–∞!"
        else:
            text = "–£ –æ—Å–ª–∞ —Ä–∞–∑–æ—Ä–≤–∞–ª–æ—Å—å –æ—á–∫–æ, –∏ —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –µ–≥–æ –∏–ø–∞—Ç—å 4 —á–∞—Å–∞!"
    else:
        text = "–°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ —á–∞—Å!"
    stop = time() - start
    return text, breaks


async def random_item(usid, chat):
    start = time()
    inventory = ut.select_inventory(id=usid, chat=chat)
    chancelist = ["", "coins"]
    chancelist.extend(ut.itemlist)
    nameslist = ["", ["–æ—Å–µ–ª–∫–æ–∏–Ω", "–æ—Å–µ–ª–∫–æ–∏–Ω–∞", "–æ—Å–µ–ª–∫–æ–∏–Ω–æ–≤"]]
    nameslist.extend(ut.endslist)
    chance = random.choices(chancelist, [40 if inventory["vibrator"] == 1 else 80, 40] + ut.chancelist, k=1)[0]
    if chance != "":
        itemrandom = random.randint(1, 3)
        ut.update("inventory", chance, itemrandom, "user_id", usid, "+")
        idlist = chancelist.index(chance)
        stop = time() - start
        return [itemrandom, ending(nameslist[idlist][0], nameslist[idlist][1], nameslist[idlist][2], itemrandom)]
    stop = time() - start
    return False, False


async def handle_delay(usid, chat):
    start = time()
    inventory = ut.select_inventory(id=usid, chat=chat)
    if inventory["viagra_use"] == 1:
        ut.update(chat, "time", 0, "user_id", usid)
        ut.update(chat, "viagra_use", 0, "user_id", usid)
    if inventory["heal_use"] == 1:
        ut.update(chat, "time", 0, "user_id", usid)
        ut.update(chat, "heal_use", 0, "user_id", usid)
        ut.update(chat, "break", 0, "user_id", usid)
    inventory = ut.select_inventory(id=usid, chat=chat)
    timer = inventory["timer"]
    if not timer == 0:
        if int(timer) - int(time()) <= 0:
            ut.update(chat, "time", 0, "user_id", usid)
            ut.update(chat, "break", 0, "user_id", usid)
            stop = time() - start
            return False
        else:
            stop = time() - start
            return await time_parse(timer)
    else:
        stop = time() - start
        return False


async def set_delay(usid, chat, randomik):
    inventory = ut.select_inventory(id=usid, chat=chat)
    times = int(time()) + 3600
    start = time()
    if inventory["break"] != 1:
        if inventory["energy"] == 1:
            times = int(time()) + 1800
        ut.update(chat, "time", times, "user_id", usid)
        if inventory["morfin_use"] == 1:
            ut.update(chat, "morfin_use", 0, "user_id", usid)
            if randomik < 0:
                ut.update(chat, "time", 0, "user_id", usid)
    else:
        if inventory["vitamine"] == 1:
            ut.update(chat, "time", int(time()) + 7200, "user_id", usid)
        else:
            ut.update(chat, "time", int(time()) + 14400, "user_id", usid)
    stop = time() - start

async def time_parse(timer):
    start = time()
    sec = int(timer) - int(time())
    mins = int(sec / 60)
    hours = int(mins / 60)
    mins = int(mins % 60)
    if not hours == 0:
       text = f"–ü—Ä–∏—Ö–æ–¥–∏ —á–µ—Ä–µ–∑ {hours} {ending('—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤', hours)} {mins} {ending('–º–∏–Ω—É—Ç—É', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç', mins)}."
    else:
        if not mins == 0:
           text = f"–ü—Ä–∏—Ö–æ–¥–∏ —á–µ—Ä–µ–∑ {mins} {ending('–º–∏–Ω—É—Ç—É', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç', mins)}."
        else:
            text = f"–ü—Ä–∏—Ö–æ–¥–∏ —á–µ—Ä–µ–∑ {sec} {ending('—Å–µ–∫—É–Ω–¥—É', '—Å–µ–∫—É–Ω–¥—ã', '—Å–µ–∫—É–Ω–¥', sec)}."
    stop = time() - start
    return text


@rate_limit(2, "osel")
@dp.message_handler(Text(["osel", "–∞—Å—ë–ª", "–∞—Å–µ–ª", "–æ—Å–µ–ª", "–æ—Å—ë–ª", "–∞—Å–ª–∏–Ω–∞", "–æ—Å–ª–∏–Ω–∞"], ignore_case=True), is_group=True, is_ban=False)
@dp.message_handler(is_group=True, is_ban=False, commands=['osel', 'asel'])
async def osel(message: types.Message):
    chat = str(message.chat.id)
    usid = message.from_user.id
    ut.create_table(message)
    inventory = ut.select_inventory(message)

    skin_id = inventory['skin']
    skin = ut.skin_stickers["skin" + str(skin_id)]
    await message.reply_sticker(sticker=skin)

    delay = await handle_delay(usid, chat)
    if delay:
        viagra_text = delay
        await message.reply(bold(viagra_text), reply_markup=button(inventory, ut))
        return

    inventory = ut.select_inventory(message)

    text, balance, randomik = await random_ipaniy(usid, chat)

    viagra_text, breaks = await is_break(usid, chat)

    itemrandom, ending_string = await random_item(usid, chat)
    if itemrandom and ending_string is not False:
        viagra_text += f'\n–¢—ã –ø–æ–ª—É—á–∏–ª {itemrandom} {ending_string}!'

    if inventory["reward_lvl"] != len(ut.oselpass):
        ut.update("inventory", "osel_counter", 1, "user_id", usid, "+")
        inventory = ut.select_inventory(message)
        if inventory["osel_counter"] >= 5:
            ut.update("inventory", "reward_lvl", 1, "user_id", usid, "+")
            ut.update("inventory", "osel_counter", 0, "user_id", usid)

    await message.reply(bold(f"""{mention(message)}, {text}
–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {balance} {ending("–∏–ø–∞–Ω–∏–µ", "–∏–ø–∞–Ω–∏—è", "–∏–ø–∞–Ω–∏–π", balance)}.
{viagra_text}"""), reply_markup=button(inventory, ut))
    await set_delay(usid, chat, randomik)



@rate_limit(2, "bonus")
@dp.message_handler(Text(["–ë–æ–Ω—É—Å", "Bonus"], ignore_case=True), is_group=True, is_ban=False)
@dp.message_handler(is_group=True, is_ban=False, commands=['bonus'])
async def bonus(message: types.Message):
    chat = str(message.chat.id)
    usid = message.from_user.id
    times = int(time()) + 86400
    text = ""
    bonus_list = ["", "coins", "balance"]
    bonus_list.extend(ut.itemlist)
    names_list = ["", ["–æ—Å–µ–ª–∫–æ–∏–Ω", "–æ—Å–µ–ª–∫–æ–∏–Ω–∞", "–æ—Å–µ–ª–∫–æ–∏–Ω–æ–≤"], ["–∏–ø–∞–Ω–∏–µ", "–∏–ø–∞–Ω–∏—è", "–∏–ø–∞–Ω–∏–π"]]
    names_list.extend(ut.endslist)
    emoji_list = ["", "„ÄΩÔ∏è", "üéâ"]
    emoji_list.extend(ut.emojilist)
    ut.create_table(message)
    ut.insert(chat, "user_id", usid)
    inventory = ut.select_inventory(message)
    timer = inventory["bonus_time"]
    if not timer == 0:
        if int(timer) - int(time()) <= 0:
            ut.update("inventory", "bonus_time", 0, "user_id", usid)
        else:
            await message.reply(bold(await time_parse(timer)))
            return
    bonus = random.choices(bonus_list, [35 if inventory["vibrator"] == 1 else 70, 40, 30] + ut.chancelist, k=3)
    bonlist = []
    for bon in bonus:
        if bon == "":
            continue
        bonlist.append(bon)
        count = random.randint(1, 4)
        id_bonus = bonus_list.index(bon)
        cnt = Counter(bonlist)
        if cnt[bon] > 1:
            continue
        try:
            ut.update("inventory", bon, count, "user_id", usid, "+")
        except:
            ut.update(chat, bon, count, "user_id", usid, "+")
        text += f'\n‚Ä¢ {count} {ending(names_list[id_bonus][0], names_list[id_bonus][1], names_list[id_bonus][2], count)}{emoji_list[id_bonus]}'
    if text == "":
        text = "\n‚Ä¢ –ù–∏—á–µ–≥–æ! –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–≤–µ–∑–µ—Ç."
    await message.reply(bold(f"–¢–≤–æ–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å:{text}\n\n–ü—Ä–∏—Ö–æ–¥–∏ –∑–∞–≤—Ç—Ä–∞!"))
    ut.update("inventory", "bonus_time", times, "user_id", usid)


@rate_limit(2, "top")
@dp.message_handler(Text(["–†–µ–π—Ç–∏–Ω–≥", "–¢–æ–ø", "Top"], ignore_case=True), is_group=True)
@dp.message_handler(is_group=True, commands="top")
async def top(message: types.Message):
    chat = str(message.chat.id)
    usid = message.from_user.id
    top = ""
    num = 2
    ut.create_table(message)
    info = ut.select_top(chat)
    try:
        best = info.pop(0)
        for us in info:
            user_id, count = us
            try:
                name = ut.select("inventory", "user_name", "user_id", user_id)
            except:
                continue
            top += f"{num}. {md.quote_html(name)} ‚Äî {count} {ending('–∏–ø–∞–Ω–∏–µ', '–∏–ø–∞–Ω–∏—è', '–∏–ø–∞–Ω–∏–π', count)}.\n"
            num += 1
        best_id, best_count = best
        try:
            best_name = ut.select("inventory", "user_name", "user_id", best_id)
        except:
            best_name = None
        best = f"üëë {md.quote_html(best_name)} ‚Äî {best_count} {ending('–∏–ø–∞–Ω–∏–µ', '–∏–ø–∞–Ω–∏—è', '–∏–ø–∞–Ω–∏–π', best_count)}.\n"
    except:
        best, top = ["", ""]
    await message.reply(bold(f"–¢–æ–ø 10 –ª—é–¥–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏–ø–∞–Ω–∏–π.\n{best}{top}"))


@rate_limit(2, "globaltop")
@dp.message_handler(Text(["–ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–æ–ø", "–ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥", "–ì–ª–æ–±–∞–ª—Ç–æ–ø", "–ì–ª–æ–±–∞–ª —Ç–æ–ø", "Globaltop", "Global top"],
                         ignore_case=True), is_group=True)
@dp.message_handler(is_group=True, commands="globaltop")
async def globaltop(message: types.Message):
    top = ""
    num = 2
    info = ut.select_globaltop()
    best = info.pop(0)
    for us in info:
        user_id, count = us
        try:
            name = ut.select("inventory", "user_name", "user_id", user_id)
        except:
            continue
        top += f"{num}. {md.quote_html(name)} ‚Äî {count} {ending('–∏–ø–∞–Ω–∏–µ', '–∏–ø–∞–Ω–∏—è', '–∏–ø–∞–Ω–∏–π', count)}.\n"
        num += 1
    best_id, best_count = best
    try:
        best_name = ut.select("inventory", "user_name", "user_id", best_id)
    except:
        best_name = None
    best = f"üëë {md.quote_html(best_name)} ‚Äî {best_count} {ending('–∏–ø–∞–Ω–∏–µ', '–∏–ø–∞–Ω–∏—è', '–∏–ø–∞–Ω–∏–π', best_count)}.\n"
    await message.reply(bold(f"–ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–æ–ø 10 –ª—é–¥–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏–ø–∞–Ω–∏–π.\n{best}{top}"))


@rate_limit(2, "help")
@dp.message_handler(Text(["Help", "–ü–æ–º–æ—â—å"], ignore_case=True))
@dp.message_handler(commands="help")
async def help(message: types.Message):
    await message.reply(bold(f"""–ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã:
/start ‚Äî –Ω–∞—á–∞—Ç—å
/osel ‚Äî –≤—ã–∏–ø–∞—Ç—å –∞—Å–ª–∞
/use ‚Äî —é–∑–Ω—É—Ç—å –ø—Ä–µ–¥–º–µ—Ç
/pass - –∞—Å–µ–ª –ø–∞—Å—Å
/bonus ‚Äî –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å
/trade (–ø—Ä–µ–¥–º–µ—Ç) (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ) ‚Äî –ø–µ—Ä–µ–¥–∞—á–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
/shop ‚Äî –º–∞–≥–∞–∑–∏–Ω
/stat ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/top ‚Äî —Ç–æ–ø 10 –ª—é–¥–µ–π –ø–æ –∏–ø–∞–Ω–∏—é
/globaltop - –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–æ–ø 10 –ª—é–¥–µ–π –ø–æ –∏–ø–∞–Ω–∏—é
/usekey (–∫–ª—é—á) - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ-–∫–ª—é—á"""))


@rate_limit(2, "stat")
@dp.message_handler(Text(["Statistics", "Stat", "–°—Ç–∞—Ç", "–°—Ç–∞—Ç–∞", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"], ignore_case=True), is_group=True, is_ban=False)
@dp.message_handler(is_group=True, is_ban=False, commands=["stat", "statistics"])
async def stat(message: types.Message):
    chat = str(message.chat.id)
    usid = message.from_user.id
    inv = ""
    ut.create_table(message)
    ut.insert(chat, "user_id", usid)
    inventory = ut.select_inventory(message)
    coins = inventory["coins"]
    balance = inventory["balance"]
    items = ut.itemlist
    emoji = ut.emojilist
    endings = ut.endslist
    for item in items:
        if inventory[item] != 0:
            inv += f"‚Ä¢ {inventory[item]} {ending(ut.itemnamelist[items.index(item)], endings[items.index(item)][1], endings[items.index(item)][2], inventory[item])}{emoji[items.index(item)]}\n"
    if inv == "":
        inv = "‚Ä¢ –ü—É—Å—Ç"

    skin_id = inventory['skin']
    skin = ut.skin_stickers["skin" + str(skin_id)]
    await message.reply_sticker(sticker=skin)

    await message.reply(bold(f"""–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {mention(message)}:

–ö–æ–ª-–≤–æ –∏–ø–∞–Ω–∏–π –∞—Å–ª–∞üéâ
‚Ä¢ {balance}

–ö–æ–ª-–≤–æ –æ—Å–ª–æ–∫–æ–∏–Ω–æ–≤„ÄΩÔ∏è
‚Ä¢ {coins}

–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:
{inv}"""))


@rate_limit(2, "trade")
@dp.message_handler(is_group=True, is_ban=False, commands="trade")
async def trade(message: types.Message):
    if message.chat.type == 'private':
        await message.reply("–ú–µ–Ω—è –º–æ–∂–Ω–æ —é–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö!", reply_markup=start_button())
        return
    emoji_list = list(ut.emojilist)
    emoji_list.append("„ÄΩÔ∏è")
    item_list = list(ut.itemlist)
    item_list.append("coins")
    endslist = ut.endslist
    endslist.append(["–æ—Å–ª–æ–∫–æ–∏–Ω", "–æ—Å–ª–æ–∫–æ–∏–Ω–∞", "–æ—Å–ª–æ–∫–æ–∏–Ω–æ–≤"])
    chat = str(message.chat.id)
    usid = message.from_user.id
    text = message.get_args().split()
    if len(text) != 2:
        await message.reply(bold("–§–æ—Ä–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!\n–ü—Ä–∏–º–µ—Ä: /trade üíä 10"))
        return
    if not message.reply_to_message:
        await message.reply(bold("–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–º—É, –∫–æ–º—É —Ç—ã —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç!"))
        return
    reply_usid = message.reply_to_message.from_user.id
    if not text[0] in emoji_list:
        await message.reply("–¢–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        return
    if reply_usid == usid:
        await message.reply(bold("–¢—ã –Ω–µ –º–æ–∂–µ—à—å –ø–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç —Å–∞–º–æ–º—É —Å–µ–±–µ!"))
        return
    it_name = item_list[emoji_list.index(text[0])]
    item = ut.select("inventory", it_name, "user_id", usid)

    try:
        if int(text[1]) < 0:
            await message.reply(bold("–ß–∏—Å–ª–æ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ –≤–µ—Ä–Ω–æ."))
            return
        if int(text[1]) > item:
            await message.reply(bold("–£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥–º–µ—Ç–∞!"))
            return
    except:
        await message.reply(bold("–ß–∏—Å–ª–æ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ –≤–µ—Ä–Ω–æ."))
        return
    if message.reply_to_message.from_user.is_bot:
        await message.reply(bold("–¢—ã –Ω–µ –º–æ–∂–µ—à—å –ø–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç –±–æ—Ç—É!"))
        return
    user = ut.select("inventory", it_name, "user_id", reply_usid)
    if user == None:
        await message.reply(bold("–£–ø—Å! –ü–æ—Ö–æ–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∏–≥—Ä–∞–ª –≤ –±–æ—Ç–∞!"))
        return
    ut.update("inventory", it_name, text[1], "user_id", reply_usid, "+")
    ut.update("inventory", it_name, text[1], "user_id", usid, "-")
    await message.reply(bold(
        f"–Ø —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {mention_reply(message)}, {text[1]} {ending(endslist[item_list.index(it_name)][0], endslist[item_list.index(it_name)][1], endslist[item_list.index(it_name)][2], int(text[1]))}{text[0]}!"))


@rate_limit(2, "shop")
@dp.message_handler(is_group=True, commands="shop")
async def shop(message: types.Message):
    await message.reply(bold("‚ñ∫ –ú–∞–≥–∞–∑–∏–Ωüè™ ‚óÑ"),
                        reply_markup=add_inline([["–ü—Ä–µ–¥–º–µ—Ç—ã", "passive"], ["–°–∫–∏–Ω—ã", "skins"], ["–†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏", "items"]]))


@dp.callback_query_handler(text=["passive", "skins", "items", "shop_back"])
async def shop_handler(call: types.CallbackQuery):
    if call.data == "passive":
        await call.message.edit_text(bold("""‚ñ∫ –ú–∞–≥–∞–∑–∏–Ω –ü—Ä–µ–¥–º–µ—Ç–æ–≤üè™ ‚óÑ
–î–∏–ª–¥–æ - –Ω–∞–≤—Å–µ–≥–¥–∞ —É–º–Ω–æ–∂–∞–µ—Ç –∏–ø–∞–Ω–∏—è –∏–ª–∏ –ø–∏–∑–¥—é–ª–∏ –Ω–∞ 2.
–ü–ª–µ—Ç—å - 10 —Ä–∞–∑ —Å–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–∏–∑–¥—é–ª–∏ –∞—Å–ª–∞, –ø–æ—Ç–æ–º –∏—Å—á–µ–∑–∞–µ—Ç.
–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫ - –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∏–ø–∞–Ω–∏—è–º–∏ –ø–æ–ª —á–∞—Å–∞.
–í–∏—Ç–∞–º–∏–Ω—ã - –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ —Ä–∞–∑—Ä—ã–≤–∞ –æ—á–∫–∞ 2 —á–∞—Å–∞, –≤–º–µ—Å—Ç–æ 4.
–í–∏–±—Ä–∞—Ç–æ—Ä - –ø–æ–≤—ã—à–∞–µ—Ç —É–¥–∞—á—É."""), reply_markup=shop_button())
    elif call.data == "skins":
        await call.message.edit_text(bold("""‚ñ∫ –ú–∞–≥–∞–∑–∏–Ω –°–∫–∏–Ω–æ–≤üè™ ‚óÑ"""), reply_markup=skins_button())
    elif call.data == "items":
        await call.message.edit_text(bold("""‚ñ∫ –ú–∞–≥–∞–∑–∏–Ω –†–∞—Å—Ö–æ–¥–Ω–∏–∫–æ–≤üè™ ‚óÑ"""), reply_markup=items_button())
    elif call.data == "shop_back":
        await call.message.edit_text(bold("‚ñ∫ –ú–∞–≥–∞–∑–∏–Ωüè™ ‚óÑ"), reply_markup=add_inline(
            [["–ü—Ä–µ–¥–º–µ—Ç—ã", "passive"], ["–°–∫–∏–Ω—ã", "skins"], ["–†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏", "items"]]))


@rate_limit(2, "use")
@dp.message_handler(Text(["–Æ–∑", "Use", "–∑–∞—é–∑–∞—Ç—å"], ignore_case=True), is_group=True, is_ban=False)
@dp.message_handler(is_group=True, is_ban=False, commands="use")
async def use(message: types.Message):
    ut.create_table(message)
    try:
        text = message.get_args().split()
    except:
        text = []
    usid = message.from_user.id
    chat = message.chat.id
    emoji = ut.emojilist
    items = ut.itemlist
    uses = ut.uselist
    inventory = ut.select_inventory(message)
    if text == []:
        await message.reply(bold("""üíä –í–∏–∞–≥—Ä–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∏–ø–∞–Ω–∏—è–º–∏.
üçæ –í–æ–¥–∫–∞ ‚Äî —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∏–ø–∞–Ω–∏—è/–ø–∏–∑–¥—é–ª–∏ –≤ 2 —Ä–∞–∑–∞.
üç∫ –ü–∏–≤–æ ‚Äî —Å–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–∏–∑–¥—é–ª–∏ –∞—Å–ª–∞.
üçå –ü—Ä–µ–∑–µ—Ä–≤–∞—Ç–∏–≤ ‚Äî —É–º–µ–Ω—å—à–∞–µ—Ç –±–æ–ª—å –æ—Ç –ø–∏–∑–¥—é–ª–µ–π.
üé¨ –ü–æ—Ä–Ω–æ-—Ñ–∏–ª—å–º ‚Äî —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∏–ø–∞–Ω–∏—è/–ø–∏–∑–¥—é–ª–∏ –≤ 5 —Ä–∞–∑.
üß™ –ú–æ—Ä—Ñ–∏–Ω - –µ—Å–ª–∏ –∞—Å–µ–ª —Ç–µ–±—è –æ—Ç–ø–∏–∑–¥–∏—Ç, –∑–∞–¥–µ—Ä–∂–∫–∞ —Å–±—Ä–æ—Å–∏—Ç—å—Å—è.
üß¥ –õ–µ—á–µ–±–Ω–∞—è –º–∞–∑—å - –ª–µ—á–∏—Ç –æ—á–∫–æ –∞—Å–ª–∞.

–ß—Ç–æ-–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /use [—Å–º–∞–π–ª–∏–∫ –ø—Ä–µ–¥–º–µ—Ç–∞]"""))
    else:
        if len(text) != 1:
            await message.reply(bold("–ù–µ–≤–µ—Ä–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Ñ–æ—Ä–º–∞!"))
            return
        text = text[0]
        if not text in emoji:
            await message.reply(bold("–¢–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!"))
            return
        if inventory[items[emoji.index(text)]] == 0:
            await message.reply(bold("–£ —Ç–µ–±—è –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞!"))
            return
        if inventory[uses[emoji.index(text)]] != 0:
            await message.reply(bold("–£ —Ç–µ–±—è –∏ —Ç–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç!"))
            return
        if uses[emoji.index(text)] == "viagra_use" and inventory["break"] == 1:
            await message.reply(bold("–£ –∞—Å–ª–∞ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ –æ—á–∫–æ!"))
            return
        if uses[emoji.index(text)] == "heal_use" and inventory["break"] == 0:
            await message.reply(bold("–£ –∞—Å–ª–∞ –Ω–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ –æ—á–∫–æ!"))
            return
        ut.update("inventory", items[emoji.index(text)], 1, "user_id", usid, "-")
        ut.update(chat, uses[emoji.index(text)], 1, "user_id", usid)
        await message.reply(bold("–¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—é–∑–∞–ª –ø—Ä–µ–¥–º–µ—Ç!"))


@rate_limit(2, "pass")
@dp.message_handler(is_group=True, is_ban=False, commands="pass")
async def oselpass(message: types.Message):
    usid = message.from_user.id
    ut.create_table(message)
    inv = ut.select_inventory(message)
    if inv["osel_counter"] >= 5:
        ut.update("inventory", "reward_lvl", 1, "user_id", usid, "+")
        ut.update("inventory", "osel_counter", 0, "user_id", usid)
    inv = ut.select_inventory(message)
    if inv["reward_lvl"] != len(ut.oselpass):
        await message.reply_photo(open("images/oselpass.png", 'rb'), bold(f"""‚ñ∫ –ê—Å–µ–ª –ø–∞—Å—Å üé´ ‚óÑ
–£—Ä–æ–≤–µ–Ω—å: {inv["reward_lvl"]}
–î–æ—Å—Ç—É–ø–Ω–æ –Ω–∞–≥—Ä–∞–¥: {inv["reward_lvl"] - inv["reward"]}
–ü–æ–ø—ã—Ç–æ–∫ –∏–ø–∞–Ω–∏–π –¥–æ —Å–ª–µ–¥—É–µ—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: {5 - inv['osel_counter']}"""), reply_markup=pass_button())
    else:
        await message.reply_photo(open("images/oselpass.png", 'rb'), bold(f"""‚ñ∫ –ê—Å–µ–ª –ø–∞—Å—Å üé´ ‚óÑ
–£—Ä–æ–≤–µ–Ω—å: {inv["reward_lvl"]}
–î–æ—Å—Ç—É–ø–Ω–æ –Ω–∞–≥—Ä–∞–¥: {inv["reward_lvl"] - inv["reward"]}
–ê—Å–µ–ª–ø–∞—Å—Å –ø—Ä–æ–π–¥–µ–Ω!"""), reply_markup=pass_button())


@dp.callback_query_handler(text="pickup_reward")
async def pass_callback(call: types.CallbackQuery):
    try:
        if not call.message.reply_to_message.from_user.id == call.from_user.id:
            return
    except:
        return
    usid = call.from_user.id
    inv = ut.select_inventory(call, call=True)
    if inv["reward_lvl"] - inv["reward"] != 0:
        ut.update("inventory", "reward", 1, "user_id", usid, "+")
        inv = ut.select_inventory(call, call=True)
        reward = inv["reward"] - 1
        rewards = ut.oselpass[reward]
        ut.update("inventory", rewards[1], rewards[0], "user_id", usid, "+")
        await call.answer(text=f"–¢—ã –ø–æ–ª—É—á–∏–ª {rewards[0]}{rewards[2]}!", show_alert=True)
        if inv["reward_lvl"] != len(ut.oselpass):
            await call.message.edit_caption(bold(f"""‚ñ∫ –ê—Å–µ–ª –ø–∞—Å—Å üé´ ‚óÑ
–£—Ä–æ–≤–µ–Ω—å: {inv["reward_lvl"]}
–î–æ—Å—Ç—É–ø–Ω–æ –Ω–∞–≥—Ä–∞–¥: {inv["reward_lvl"] - inv["reward"]}
–ü–æ–ø—ã—Ç–æ–∫ –∏–ø–∞–Ω–∏–π –¥–æ —Å–ª–µ–¥—É–µ—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: {5 - inv['osel_counter']}"""), reply_markup=pass_button())
        else:
            await call.message.edit_caption(bold(f"""‚ñ∫ –ê—Å–µ–ª –ø–∞—Å—Å üé´ ‚óÑ
–£—Ä–æ–≤–µ–Ω—å: {inv["reward_lvl"]}
–î–æ—Å—Ç—É–ø–Ω–æ –Ω–∞–≥—Ä–∞–¥: {inv["reward_lvl"] - inv["reward"]}
–ê—Å–µ–ª–ø–∞—Å—Å –ø—Ä–æ–π–¥–µ–Ω!"""), reply_markup=pass_button())
    else:
        await call.answer(text=f"–¢—ã –Ω–µ –º–æ–∂–µ—à—å –∑–∞–±—Ä–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É!", show_alert=True)


@rate_limit(2, "usekey")
@dp.message_handler(is_group=True, is_ban=False, commands="usekey")
async def usekey(message: types.Message):
    usid = message.from_user.id
    chatid = str(message.chat.id)
    ut.create_table(message)
    emoji_list = list(ut.emojilist)
    emoji_list.extend(["„ÄΩÔ∏è", "üéâ"])
    item_list = list(ut.itemlist)
    item_list.extend(["coins", "balance"])
    text = message.get_args().split()
    if len(text) == 1:
        key = text[0]
        max_uses = ut.select("keys", "maxuses", "key", key)
        if max_uses == None:
            await message.reply(bold("–ö–ª—é—á –Ω–µ–≤–µ—Ä–Ω—ã–π!"))
            return
        uses = ut.select("keys", "uses", "key", key)
        reward = re.split(r'_', ut.select("keys", "reward", "key", key))
        blacklist = ut.select("keys", "blacklist", "key", key)
        if blacklist is None:
            blacklist = "0000000_"
        if uses < max_uses:
            if str(usid) in re.split(r'_', blacklist):
                await message.reply(bold("–¢—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥!"))
                return
            ut.update("keys", "uses", 1, "key", key, "+")
            ut.update("keys", "blacklist", blacklist + (str(usid) + "_"), "key", key)
            if not reward[1] == "balance":
                ut.update("inventory", reward[1], reward[0], "user_id", usid, "+")
            else:
                ut.update(chatid, reward[1], reward[0], "user_id", usid, "+")
            await message.reply(
                bold(f"–ö–ª—é—á —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω! –ù–∞–≥—Ä–∞–¥–∞ {reward[0]} {emoji_list[item_list.index(reward[1])]}."))
        else:
            await message.reply(bold("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω–æ!"))
    else:
        await message.reply(bold("–ö–ª—é—á –Ω–µ –≤–≤–µ–¥–µ–Ω!"))


@dp.callback_query_handler()
async def use(call: types.CallbackQuery):
    chat = str(call.message.chat.id)
    usid = call.from_user.id
    products = [str(x) for t in ut.select("products", "id", "type", "passive", many=True) for x in t]
    skins = [str(x) for t in ut.select("products", "id", "type", "skin", many=True) for x in t]
    items = [str(x) for t in ut.select("products", "id", "type", "item", many=True) for x in t]
    useslist = ut.uselist
    itemlist = ut.itemlist
    uselist = ut.datalist
    textslist = ut.textslist
    user = ut.select("inventory", "user_id", "user_id", usid)
    if user == None:
        return
    if call.data in products:
        item = ut.select("inventory", call.data, "user_id", usid)
        if item == None:
            return
        coins = ut.select("inventory", "coins", "user_id", usid)
        price = ut.select("products", "price", "id", call.data)
        if item == 1:
            await call.answer(text="–£ —Ç–µ–±—è —É–∂–µ –∫—É–ø–ª–µ–Ω —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç!", show_alert=True)
            return
        if coins >= price:
            ut.update("inventory", "coins", price, "user_id", usid, "-")
            ut.update("inventory", call.data, 1, "user_id", usid)
            await call.answer(text="–¢—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç!", show_alert=True)
        else:
            await call.answer(text="–£ —Ç–µ–±—è –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –æ—Å–ª–æ–∫–æ–∏–Ω–æ–≤!", show_alert=True)
            return
    elif call.data in skins:
        skinid = skins.index(call.data)
        coins = ut.select("inventory", "coins", "user_id", usid)
        price = ut.select("products", "price", "id", call.data)
        skin_list = ut.select("inventory", "skin_list", "user_id", usid)
        current_skin = ut.select("inventory", "skin", "user_id", usid)
        if call.data in re.split(r'_', skin_list):
            ut.update("inventory", "skin", skinid, "user_id", usid)
            await call.answer(text="–¢—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞–¥–µ–ª —ç—Ç–æ—Ç —Å–∫–∏–Ω!", show_alert=True)
            return
        if coins >= price:
            ut.update("inventory", "coins", price, "user_id", usid, "-")
            ut.update("inventory", "skin", skinid, "user_id", usid)
            ut.update("inventory", "skin_list", skin_list + f"_{call.data}", "user_id", usid)
            await call.answer(text="–¢—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª —ç—Ç–æ—Ç —Å–∫–∏–Ω!", show_alert=True)
        else:
            await call.answer(text="–£ —Ç–µ–±—è –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –æ—Å–ª–æ–∫–æ–∏–Ω–æ–≤!", show_alert=True)
            return
    elif call.data in items:
        coins = ut.select("inventory", "coins", "user_id", usid)
        price = ut.select("products", "price", "id", call.data)
        if coins >= price:
            ut.update("inventory", "coins", price, "user_id", usid, "-")
            ut.update("inventory", call.data, 1, "user_id", usid, "+")
            await call.answer(text="–¢—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç!", show_alert=True)
        else:
            await call.answer(text="–£ —Ç–µ–±—è –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –æ—Å–ª–æ–∫–æ–∏–Ω–æ–≤!", show_alert=True)
            return
    elif call.data in uselist:
        try:
            if not call.message.reply_to_message.from_user.id == call.from_user.id:
                return
        except:
            return
        inventory = ut.select_inventory(call, call=True)
        idlist = uselist.index(call.data)
        if not inventory[itemlist[idlist]] == 0:
            if call.data == "use_viagra" and inventory["break"] == 1:
                if inventory["heal_use"] == 0:
                    await call.answer(text="–£ –∞—Å–ª–∞ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ –æ—á–∫–æ!", show_alert=True)
                    return
            if call.data == "use_heal" and inventory["break"] == 0:
                await call.answer(text="–£ –∞—Å–ª–∞ –Ω–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ –æ—á–∫–æ!", show_alert=True)
                return
            if inventory[useslist[idlist]] == 0:
                ut.update("inventory", itemlist[idlist], 1, "user_id", usid, "-")
                ut.update(chat, useslist[idlist], 1, "user_id", usid)
                inventory = ut.select_inventory(call, call=True)
                await call.message.edit_text(f"***{textslist[idlist]}***", reply_markup=button(inventory, ut),
                                             parse_mode="Markdown")
            else:
                await call.answer(text="–¢—ã –∏ —Ç–∞–∫ –∑–∞—é–∑–∞–ª —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç!", show_alert=True)
        else:
            await call.answer(text="–£ —Ç–µ–±—è –Ω–µ—Ç —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞!", show_alert=True)
